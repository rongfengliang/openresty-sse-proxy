user root; 
master_process off;
worker_processes 1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  text/html;
    lua_code_cache off;
    lua_package_path '/opt/lua/?.lua;;';
    real_ip_header     X-Forwarded-For;
    resolver 127.0.0.11;
    server {
       listen 80;
       charset utf-8;
       proxy_set_header X-Forwarded-For $remote_addr;
	   proxy_buffering off;
	   proxy_cache off;
       proxy_set_header Connection '';
	   proxy_http_version 1.1;
	   chunked_transfer_encoding off;
       default_type text/html;
       location /ssev2 {
           proxy_pass http://sse:3000;
       }
       location / {
         default_type text/event-stream;
         content_by_lua_block {
            local sse = require "resty.sse"
            local cjson = require "cjson"
            local conn, err = sse.new()
            if not conn then
                ngx.say("failed to get connection: ", err)
            end
            local res, err = conn:request_uri("http://sse:3000/ssev2")
            if not res then
                ngx.say("failed to request: ", err)
                return
            end
            while true
             do 
                local event, err = conn:receive()
                if err then 
                    ngx.say(err) 
                end
                if event then  
                    ngx.say(cjson.encode(event)) 
                end
                ngx.flush(true)
            end
         }
        }
    }
}